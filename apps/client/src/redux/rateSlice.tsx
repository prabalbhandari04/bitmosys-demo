// rateSlice.js

// Import necessary dependencies
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

// Define initial state for the slice
const initialState = {
  rates: [],     // Initial rates array
  status: 'idle', // Initial status
  error: null,    // Initial error value
};

// Create an async thunk to fetch rates from an API
export const fetchRates = createAsyncThunk('rates/fetchRates', async () => {
  try {
    // Fetch rates from the API
    const response = await axios.get('http://localhost:3000/api/rate');
    // Return the data received from the API
    return response.data;
  } catch (error) {
    // If there's an error during fetching, throw the error
    throw error;
  }
});

// Create a slice for managing rates state
const rateSlice = createSlice({
  name: 'rates',  // Name of the slice
  initialState,  // Initial state defined above
  reducers: {},  // No additional reducers defined
  extraReducers: (builder) => {
    // Define extra reducers for handling async thunk actions
    builder
      // Action dispatched when fetching rates starts
      .addCase(fetchRates.pending, (state) => {
        // Set status to 'loading'
        state.status = 'loading';
      })
      // Action dispatched when fetching rates successfully completes
      .addCase(fetchRates.fulfilled, (state, action) => {
        // Set status to 'succeeded' and update rates array with fetched data
        state.status = 'succeeded';
        state.rates = action.payload;
      })
      // Action dispatched when fetching rates encounters an error
      .addCase(fetchRates.rejected, (state, action) => {
        // Set status to 'failed' and update error value with the error message
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

// Export the reducer function generated by createSlice
export default rateSlice.reducer;
