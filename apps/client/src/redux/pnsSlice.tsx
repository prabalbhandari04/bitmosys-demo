// Import necessary dependencies
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

// Define initial state for the slice
const initialState = {
  pns: [],        // Initial PNs array
  status: 'idle', // Initial status
  error: null,    // Initial error value
};

// Create an async thunk to fetch PNs from an API
export const fetchPns = createAsyncThunk('pns/fetchPNs', async () => {
  try {
    // Fetch PNs from the API
    const response = await axios.get('http://localhost:3000/api/pns');
    // Return the data received from the API
    return response.data;
  } catch (error) {
    // If there's an error during fetching, throw the error
    throw error;
  }
});

// Create an async thunk to create a PN
export const createPns = createAsyncThunk('pns/createPN', async (pnData) => {
  try {
    // Post PN data to the API
    const response = await axios.post('http://localhost:3000/api/pns', pnData);
    // Return the data received from the API
    return response.data;
  } catch (error) {
    // If there's an error during creation, throw the error
    throw error;
  }
});

// Create a slice for managing PNs state
const pnsSlice = createSlice({
  name: 'pns',    // Name of the slice
  initialState,   // Initial state defined above
  reducers: {},   // No additional reducers defined
  extraReducers: (builder) => {
    // Define extra reducers for handling async thunk actions
    builder
      // Action dispatched when fetching PNs starts
      .addCase(fetchPns.pending, (state) => {
        // Set status to 'loading'
        state.status = 'loading';
      })
      // Action dispatched when fetching PNs successfully completes
      .addCase(fetchPns.fulfilled, (state, action) => {
        // Set status to 'succeeded' and update PNs array with fetched data
        state.status = 'succeeded';
        state.pns = action.payload;
      })
      // Action dispatched when fetching PNs encounters an error
      .addCase(fetchPns.rejected, (state, action) => {
        // Set status to 'failed' and update error value with the error message
        state.status = 'failed';
        state.error = action.error.message;
      })
      // Action dispatched when creating a PN starts
      .addCase(createPns.pending, (state) => {
        // Set status to 'loading'
        state.status = 'loading';
      })
      // Action dispatched when creating a PN successfully completes
      .addCase(createPns.fulfilled, (state, action) => {
        // Set status to 'succeeded' and update PNs array with created PN data
        state.status = 'succeeded';
        state.pns.push(action.payload); // Assuming the API returns the created PN
      })
      // Action dispatched when creating a PN encounters an error
      .addCase(createPns.rejected, (state, action) => {
        // Set status to 'failed' and update error value with the error message
        state.status = 'failed';
        state.error = action.error.message;
      });
  },
});

// Export the reducer function generated by createSlice
export default pnsSlice.reducer;
